<?php

// Load Field module hooks.
module_load_include('inc', 'bibdk_cart', 'bibdk_cart.field');

/**
 * Implements hook_menu().
 */
function bibdk_cart_menu() {
  $items['cart/ajax'] = array(
    'page callback' => 'bibdk_cart_add_to_cart',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'bibdk_cart.ajax.inc',
  );
  $items['user/cart'] = array(
    'title' => t('Cart'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_cart_view_form'),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    //'file' => 'bibdk_cart.ajax.inc',
  );
  return $items;
}

/*
 * Implements hook_theme().
 */
function bibdk_cart_theme() {
  return array(
    'bibdk_cart_button' => array(
      'variables' => array('add_to_cart' => ''),
      'template' => 'theme/bibdk-cart-button',
    ),
  'bibdk_cart_manifestation' => array(
    'template' => 'theme/bibdk-cart-manifestation',
    'variables' => array('fields'=> array(), 'view_mode' => 'cart', 'id'=>0, 'pid'=>'', 'title' => '', 'author' => '' ),
    'render_element' => 'elements'
    ),
  );
}


/**
 * Implememts hook_user_profile_tabs (
 *
 * @see ding_user.module)
 * */
function bibdk_cart_user_profile2_tabs() {
  $ret = new stdClass();
  $ret->label = t('cart');
  $ret->form = 'bibdk_cart_form';
  $ret->type = 'bibdk_cart_list';
  return $ret;
}


/**
 * List view of cart
 *
 * @param $form
 * @param $form_state
 * @return array
 */

function bibdk_cart_view_form($form, &$form_state) {
  global $user;
  if ($user->uid) {
    drupal_goto('user/' . $user->uid . '/edit/bibdk_cart_list');
  }
  $cart = bibdk_cart_form($form, $form_state);
  /*$form['wrapper'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('element-wrapper'),
    ),
  );*/

  $form['Cart'] = $cart;
  $form['#weight'] = -1;
  return $form;
}

/**
 * Render cart view
 * @param $form
 * @param $form_state
 * @return array
 */
function bibdk_cart_form($form, &$form_state){
  $cart = BibdkCart::getAll();
  if (empty($cart))
    return array();

  foreach($cart as $pid)
    $pids[] = $pid;
  $manifestations = bibdk_cart_get_manifestations($pids);
  foreach($manifestations as $delta => $manifestation){
    $type = is_array($manifestation->getType()) ? reset($manifestation->getType()) : $manifestation->getType();
    $form['views'][$type][] = bibdk_cart_manifestation_view($manifestation);
  }
  foreach($form['views'] as $type => $view){
    $form['views'][$type] += array(
      '#type' => 'fieldset',
      '#title'=> t($type),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#attributes' => array(
        'class' => array('element-wrapper'),
      ),
    );
  }

  return $form;
}

/**
 * Get manifestations
 * @param $pids array
 * @return array manifestations
 */
function bibdk_cart_get_manifestations($pids){
  /**
   * ting_openformat_get_manifestations returns a bibdkWork as an array and all
   * the manifestations are saved in the manifestations variable.
   * TODO :ting_openformat should have a method to return an array of manifestations
   */
  $works = ting_openformat_get_manifestations($pids);
  $work = reset($works);
  return (isset($work->manifestations)) ? $work->manifestations : null;
}

/**
 * Render cart view of single manifestation
 * @param manifestation $manifestation
 * @return array
 */
function bibdk_cart_manifestation_view(manifestation $manifestation){
  $view =  ting_openformat_manifestation_view($manifestation, 'cart');
  $view['#theme'] = 'bibdk_cart_manifestation';
  $view += array(
    '#title' => _ting_openformat_parse_element($manifestation->getTitle(), ','),
    '#author' => _ting_openformat_parse_element($manifestation->getCreator(), ','),
    '#pid' => preg_replace('/[^a-zA-Z0-9-]+/', '-', $manifestation->id),
  );
  return $view;
}


/**
 * Implements hook_entity_info_alter().
 */
function bibdk_cart_entity_info_alter(&$entity_info) {
  $entity_info['bibdkManifestation']['view modes']['cart'] = array(
    'label' => t('Cart'),
    'custom settings' => TRUE,
  );
}
