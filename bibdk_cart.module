<?php

// Load Field module hooks.
module_load_include('php', 'bibdk_cart', 'BibdkCart');
module_load_include('inc', 'bibdk_cart', 'bibdk_cart.field');
module_load_include('inc', 'bibdk_cart', 'bibdk_cart.webservice');

/**
 * Implements hook_menu().
 */
function bibdk_cart_menu() {
  $items['cart/ajax'] = array(
    'page callback' => 'bibdk_cart_add_to_cart',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'bibdk_cart.ajax.inc',
  );
  $items['user/cart'] = array(
    'title' => t('Cart'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_cart_view_form'),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    //'file' => 'bibdk_cart.ajax.inc',
  );
  return $items;
}

/*
 * Implements hook_theme().
 */
function bibdk_cart_theme() {
  return array(
    'bibdk_cart_button' => array(
      'variables' => array('add_to_cart' => ''),
      'template' => 'theme/bibdk-cart-button',
    ),
    'bibdk_cart_button_subwork' => array(
      'variables' => array('add_to_cart' => ''),
      'template' => 'theme/bibdk-cart-button-subwork',
    ),
    'bibdk_cart_manifestation' => array(
      'template' => 'theme/bibdk-cart-manifestation',
      'variables' => array('fields' => array(), 'view_mode' => 'cart', 'id' => 0, 'pid' => '', 'title' => '', 'author' => '', 'type' => '', 'cart_btn' => '', 'several_editions' => '', 'checkbox' => ''),
      'render_element' => 'elements'
    ),
  );
}


/**
 * Implememts hook_user_profile_tabs (
 *
 * @see ding_user.module)
 * */
function bibdk_cart_user_profile2_tabs() {
  $ret = new stdClass();
  $ret->label = t('cart');
  $ret->form = 'bibdk_cart_form';
  $ret->type = 'bibdk_cart_list';
  return $ret;
}


/**
 * List view of cart
 *
 * @param $form
 * @param $form_state
 * @return array
 */

function bibdk_cart_view_form($form, &$form_state) {
  global $user;
  if ($user->uid) {
    drupal_goto('user/' . $user->uid . '/edit/bibdk_cart_list');
  }
  $cart = bibdk_cart_form($form, $form_state);
  $form['cart'] = $cart;
  return $form;
}

/**
 * Render cart view
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function bibdk_cart_form($form, &$form_state) {
  $cart = BibdkCart::getAll();
  if (empty($cart)) {
    return array();
  }

  /* A cart element might contain a comma seperated list of pid's.
   * We explode the list at take the first element.
   */
  foreach ($cart as $pid_string) {
    $pid = explode(',', $pid_string);
    $pids_arr[$pid_string] = $pid;
    $manifestation_pids[] = reset($pid);
  }

  $manifestations = bibdk_cart_get_manifestations($manifestation_pids);

  if (!isset($manifestations)) {
    return array();
  }

  $items = array();
  foreach ($pids_arr as $pid_string => $pid) {
    $items[]['manifestation'] = _bibdk_cart_generate_form_view($manifestations, $pid, $items);
  }

  $header = array(
    'manifestation' => t('bibdk_cart_manifestation_header'),
  );

  $form['cart-table'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $items,
    '#empty' => t('No items in cart yet'),
    '#js_select' => FALSE,
    '#sticky' => FALSE,
    '#multiple' => TRUE,
    '#attributes' => array(
      'class' => array(
        'table'
      ),
    ),
  );

  return $form;
}

function _bibdk_cart_generate_form_view($manifestations, $pid) {
  $manifestation = $manifestations[reset($pid)];
  return drupal_render(bibdk_cart_manifestation_view($manifestation, $pid));
}

function _bibdk_cart_get_remaining_form_elements($type) {
  return array(
    '#type' => 'fieldset',
    '#title' => t($type),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#attributes' => array(
      'class' => array('element-wrapper'),
    ),
  );
}

/**
 * Get manifestations
 *
 * @param $pids array
 * @return array manifestations
 */
function bibdk_cart_get_manifestations($pids) {
  /**
   * ting_openformat_get_manifestations returns a bibdkWork as an array and all
   * the manifestations are saved in the manifestations variable.
   * TODO :ting_openformat should have a method to return an array of manifestations
   */
  $works = ting_openformat_get_manifestations($pids);
  $work = reset($works);
  return (isset($work->manifestations)) ? $work->manifestations : NULL;
}

/**
 * Render cart view of single manifestation
 *
 * @param manifestation $manifestation
 * @param $pids
 * @return array
 */
function bibdk_cart_manifestation_view($manifestation, $pids) {
  $view = ting_openformat_manifestation_view($manifestation, 'cart');
  $view['#theme'] = 'bibdk_cart_manifestation';
  $view += array(
    '#title' => _ting_openformat_parse_element($manifestation->getTitle(), ','),
    '#author' => _ting_openformat_parse_element($manifestation->getCreator(), ','),
    '#type' => _ting_openformat_parse_element($manifestation->getType(), ','),
    '#pid' => drupal_strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', $manifestation->id)),
    '#cart_btn' => (!empty($pids)) ? theme('bibdk_cart_button', array('add_to_cart' => bibdk_cart_get_link($pids))) : '',
    '#several_editions' => (!empty($pids) && count($pids) > 1) ? t('all_editions') : '',
  );
  return $view;
}


/**
 * Implements hook_entity_info_alter().
 */
function bibdk_cart_entity_info_alter(&$entity_info) {
  $entity_info['bibdkManifestation']['view modes']['cart'] = array(
    'label' => t('Cart'),
    'custom settings' => TRUE,
  );
}

function bibdk_cart_ting_openformat_subwork_materialtype_actions($ordered_subworks, $type_id, $subtype_id) {
  $lookup_pids = array_keys($ordered_subworks[$type_id][$subtype_id]['manifest']['manifestations']);
  $link = bibdk_cart_get_link($lookup_pids);

  $render['cart'] = array(
    '#theme' => 'bibdk_cart_button_subwork',
    '#add_to_cart' => $link,
  );

  return $render;
}

/**
 * Implements hook_user_login. Check if user had elements in cart before login.
 * If elements are not on webservice - then add to webservice.
 *
 * @param $edit
 * @param $account
 */
function bibdk_cart_user_login(&$edit, $account) {
  if (ding_user_is_provider_user($account)) {
    $user_cart = _bibdk_cart_get_cart_on_webservice($account);
    if ($_SESSION['bibdk_cart']) {
      foreach ($_SESSION['bibdk_cart'] as $element) {
        if (!in_array($element, $user_cart)) {
          $add[] = $element;
        }
      }
      if (isset($add)) {
        _bibdk_cart_add_content_webservice($add);
      }
      $_SESSION['bibdk_cart'] += $user_cart;
    }
    else {
      $_SESSION['bibdk_cart'] = $user_cart;
    }

  }
}
