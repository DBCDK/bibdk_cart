<?php

// Load Field module hooks.
module_load_include('php', 'bibdk_cart', 'includes/BibdkCart');
module_load_include('php', 'bibdk_cart', 'includes/BibdkCartElement');
module_load_include('inc', 'bibdk_cart', 'includes/bibdk_cart.field');
module_load_include('inc', 'bibdk_cart', 'includes/bibdk_cart.webservice');
module_load_include('inc', 'bibdk_cart', 'includes/bibdk_cart.mypage');

/**
 * Implements hook_menu().
 */
function bibdk_cart_menu() {
  $items['cart/ajax'] = array(
    'page callback' => 'bibdk_cart_add_to_cart',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/bibdk_cart.ajax.inc',
  );
  $items['cart/ajax/deleteitems'] = array(
    'page callback' => 'bibdk_cart_delete_selected',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/bibdk_cart.ajax.inc',
  );
  $items['user/cart'] = array(
    'title' => t('Cart'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bibdk_cart_view_form'),
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK,
    //'file' => 'includes/bibdk_cart.ajax.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 *
 * @return array
 */
function bibdk_cart_theme() {
  return array(
    'bibdk_cart_button' => array(
      'variables' => array('add_to_cart' => ''),
      'template' => 'theme/bibdk-cart-button',
    ),
    'bibdk_cart_view_primary_actions' => array(
      'variables' => array(),
      'template' => 'theme/bibdk-cart-view-primary-actions'
    ),
    'bibdk_cart_view_secondary_actions' => array(
      'variables' => array('actions' => array()),
      'template' => 'theme/bibdk-cart-view-secondary-actions'
    ),
    'bibdk_cart_button_subwork' => array(
      'variables' => array('add_to_cart' => ''),
      'template' => 'theme/bibdk-cart-button-subwork',
    ),
    'bibdk_cart_manifestation' => array(
      'template' => 'theme/bibdk-cart-manifestation',
      'variables' => array('fields' => array(), 'pid' => '', 'several_editions' => '', 'type_translated' => ''),
      'render_element' => 'elements'
    ),
  );
}


/**
 * Implememts hook_user_profile_tabs (
 *
 * @see ding_user.module)
 * */
function bibdk_cart_user_profile2_tabs() {
  $ret = new stdClass();
  $ret->label = t('cart');
  $ret->form = 'bibdk_cart_get_form';
  $ret->type = 'bibdk_cart_list';
  return $ret;
}


/**
 * List view of cart
 *
 * @param $form
 * @param $form_state
 * @return array
 */

function bibdk_cart_view_form($form, &$form_state) {
  global $user;
  if ($user->uid) {
    drupal_goto('user/' . $user->uid . '/edit/bibdk_cart_list');
  }
  $cart = bibdk_cart_get_form($form, $form_state);
  $form['cart'] = $cart;
  return $form;
}

/**
 * Render cart view
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function bibdk_cart_get_form($form, &$form_state) {
  $cart = BibdkCart::getAll();
  $items = array();

  if (!empty($cart)) {
    bibdk_cart_set_manifestations($cart);

    foreach ($cart as $delta => $element) {
      $item = bibdk_cart_manifestation_view($element->getManifestation(), $element->getElementArray());
      $items[$delta]['manifestation'] = drupal_render($item);
      $items[$delta]['status'] = implode(', ', $element->getStatusView());
      $items[$delta]['actions'] = isset($item['action']) ? $item['action'] : "";
    }
  }
  $form['cartactions'] = array(
    '#type' => 'item',
  );
  $form['cartactions'] += bibdk_cart_get_primary_actions(array());

  $form['cartactions'] += bibdk_cart_get_secondary_actions(array());

  $header = array(
    'manifestation' => t('bibdk_cart_header', array(), array('context' => 'bibdk_cart')),
    'status' => t('bibdk_cart_status', array(), array('context' => 'bibdk_cart')),
    'actions' => t('bibdk_cart_actions', array(), array('context' => 'bibdk_cart')),
  );

  $form = _bibdk_cart_get_cart_table($header, $items, $form);

  return $form;
}

/**
 * @param array $form
 * @return array $form
 */
function bibdk_cart_get_primary_actions($form) {
  $form['cart_table_priamry_actions'] = array(
    '#markup' => theme('bibdk_cart_view_primary_actions', array()),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'bibdk_cart') . '/js/bibdk_cart_view_primary_actions.js',
      ),
    ),
    '#attributes' => array(
      'class' => array(),
    ),
  );

  return $form;
}

/**
 * Invokes hook_cart_actions() in order to retrieve actions that should be included in the cart view
 *
 * @param array $form
 * @return array $form
 */
function bibdk_cart_get_secondary_actions($form) {
  $actions = array();
  $actions = module_invoke_all('cart_actions', $actions);

  if (!empty($actions)) {
    uasort($actions, 'element_sort');

    foreach ($actions as $action) {
      $items[] = drupal_render($action);
    }
    $form['cart_table_secondary_actions'] = array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#type' => 'ul',
      '#attributes' => array(
        'class' => array('cart-view-secondary-actions', 'cart-actions')
      ),
    );
  }

  return $form;
}

/** Implements hook_ting_openformat_actions
 * Add actions to work, subwork and manifestations
 * @param $type
 * @param $entity
 * @param $view_mode
 * @param $langcode
 * @return array
 */
function bibdk_cart_ting_openformat_actions($type, $entity, $view_mode, $langcode){
  $element = array();
  if ($type == 'bibdkManifestation'){

    $link = bibdk_cart_get_link($entity->id);
    $element['cart'] = array(
      '#markup' => theme('bibdk_cart_button', array('add_to_cart' => $link)),
      '#weight' => 1
    );

  }
  return $element;
}


/**
 * @param array $header
 * @param array $items
 * @param array $form
 * @return array $form
 */
function _bibdk_cart_get_cart_table($header, $items, $form) {
  $form['cart_table'] = array(
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $items,
    '#empty' => t('no_items_in_cart_yet', array(), array('context' => 'bibdk_cart')),
    '#js_select' => FALSE,
    '#sticky' => FALSE,
    '#multiple' => TRUE,
    '#attributes' => array(
      'class' => array(
        'table',
        'element-wrapper',
        'cart-item-checkbox',
      ),
    ),
  );
  return $form;
}

/** Populate the cart with manifestations
 *
 * @param $cart
 */
function bibdk_cart_set_manifestations(&$cart) {
  $ids = array();
  foreach ($cart as $element) {
    $ids += array_merge($ids, $element->getElementArray());
  }
  $manifestations = array();
  /**
   * We get all manifestations, in order to check if one of the manifestations is reservable
   * TODO: refactor to make this a cleaner solution
   */
  foreach($ids as $id){
    $manifestation = bibdk_cart_get_manifestations(array($id));
    if (is_array($manifestation) && count($manifestation))
      foreach($manifestation as $key => $val)
        $manifestations[$key] = $val;
    }

  if(!$manifestations){
    $cart = array();
  }

  foreach ($cart as $element) {
    foreach ($element->getElementArray() as $manifestation_id) {
      if (isset($manifestations[$manifestation_id])){
        $manifestation = $manifestations[$manifestation_id];
        if ($manifestation->isReservable() || $element->GetManifestation() == NULL) {
          $manifestation->ding_entity_id = $manifestation->id = $element->getElement();
          $element->setManifestation($manifestation);
        }
      }
    }
  }
}

/**
 * Get manifestations
 *
 * @param $pids array
 * @return array manifestations
 */
function bibdk_cart_get_manifestations($pids) {
  /**
   * ting_openformat_get_manifestations returns a bibdkWork as an array and all
   * the manifestations are saved in the manifestations variable.
   * TODO :ting_openformat should have a method to return an array of manifestations
   */
  $works = ting_openformat_get_manifestations($pids);
  $work = reset($works);
  return (isset($work->manifestations)) ? $work->manifestations : NULL;
}

/**
 * Render cart view of single manifestation
 *
 * @param Manifestation $manifestation
 * @param $pids
 * @return array
 */
function bibdk_cart_manifestation_view($manifestation, $pids) {
  if (!isset($manifestation)){
    return _bibdk_cart_no_manifestation_view($pids);
  }
  $view = ting_openformat_manifestation_view($manifestation, 'cart');
  if (isset($view['#actions']['reservation'])) {
    $view['action'] = $view['#actions']['reservation']['#markup'];
    unset($view['#fields']['bibdk_mani_reservation_button']);
  }
  else if (isset($view['#fields']['bibdk_reservation_info'][0]['#markup'])) {
    $view['action'] = $view['#fields']['bibdk_reservation_info'][0]['#markup'];
    unset($view['#fields']['bibdk_reservation_info']);
  }
  else {
    $view['action'] = t('cannot_reservate');
  }


  _bibdk_cart_manifestation_view_strip_links($view);

  $view['#theme'] = 'bibdk_cart_manifestation';
  $view += array(
    '#pid' => drupal_strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', $manifestation->id)),
    '#several_editions' => (!empty($pids) && count($pids) > 1) ? t('all_editions', array(), array('context' => 'bibdk_cart')) : '',
    '#fields' => $view['#fields'],
    '#type_translated' => isset($view['#fields']['bibdk_mani_type'][0]['#markup']) ? _bibdk_cart_translate_type($view['#fields']['bibdk_mani_type'][0]['#markup']) : '',
  );
  return $view;
}

function _bibdk_cart_no_manifestation_view($pids){

  return array(
    '#theme' => 'bibdk_cart_manifestation',
    '#pid' => drupal_strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', reset($pids))),
    '#several_editions' => '',
    '#title' => t('no manifestations'),
    '#fields' => array(
      'bibdk_mani_title' => array(
        0 => array(
          '#markup' => t('manifestation_is_not_on_service'),
        )

      ),
    ),
    '#type_translated' => '',
  );

}

/**
 * @param $type
 * @return array
 */
function _bibdk_cart_translate_type($type){
  $translation = _ting_openformat_type_translation($type, NULL);
  return $translation['type'];
}

/**
 * Implements hook_entity_info_alter().
 */
function bibdk_cart_entity_info_alter(&$entity_info) {
  $entity_info['bibdkManifestation']['view modes']['cart'] = array(
    'label' => t('Cart'),
    'custom settings' => TRUE,
  );
}

/**
 * @param $ordered_subworks
 * @param $type_id
 * @param $subtype_id
 * @return mixed
 */
function bibdk_cart_ting_openformat_subwork_materialtype_actions($ordered_subworks, $type_id, $subtype_id) {
  $lookup_pids = array_keys($ordered_subworks[$type_id][$subtype_id]['manifest']['manifestations']);
  $link = bibdk_cart_get_link($lookup_pids);
  $link['#title'] = t('add_to_basket_any_edition',array(),array('context'=>'bibdk_cart'));
  $render['cart'] = array(
    '#theme' => 'bibdk_cart_button',
    '#add_to_cart' => $link,
  );

  return $render;
}

/**
 * Implements hook_user_login. Check if user had elements in cart before login.
 * If elements are not on webservice - then add to webservice.
 *
 * @param $edit
 * @param $account
 */
function bibdk_cart_user_login(&$edit, $account) {
  if (isset($_GET['pass-reset-token']) || (isset($_POST['form_id']) && $_POST['form_id'] == 'user_pass_reset')) {
    return;
  }
  if (ding_user_is_provider_user($account)) {
    $user_cart = _bibdk_cart_get_cart_on_webservice($account);
    if (isset($_SESSION['bibdk_cart'])) {
      foreach ($_SESSION['bibdk_cart'] as $key => $element) {
        if (!in_array($key, $user_cart)) {
          $id = _bibdk_cart_add_content_webservice($element->toService());
          $element->setId($id);
          $_SESSION['bibdk_cart'][$key] = $element;
        }
      }
      $_SESSION['bibdk_cart'] += $user_cart;
    }
    else {
      $_SESSION['bibdk_cart'] = $user_cart;
    }
  }
}

/** Implements hook_bibdk_reservation_complete
 *
 * @param $pids
 * @param $order_result
 */
function bibdk_cart_bibdk_reservation_complete($pids, $order_result) {
  if ($element = BibdkCart::checkInCart($pids)) {
    $element->setStatus('reservation_complete');
    $element->save();
    drupal_add_js(drupal_get_path('module', 'bibdk_cart') . '/js/bibdk_cart_reload.js');
  }
}


/**
 * @param $status string
 * @param $pids string
 */
function bibdk_cart_reservation_update_status($status, $pids) {
  $ids = explode(';', $pids);
  foreach ($ids as $id) {
    if ($element = BibdkCart::checkInCart($id)) {
      $element->setStatus($status);
      $element->save();

    }
  }
  drupal_add_js(drupal_get_path('module', 'bibdk_cart') . '/js/bibdk_cart_reload.js');
}

/**
 * Hack to remove html tags from fields
 *
 * @param $view
 */
function _bibdk_cart_manifestation_view_strip_links(&$view) {
  if (isset($view['#fields']) && is_array($view['#fields'])) {
    foreach ($view['#fields'] as $key => $field) {
      if (isset($field[0]['#markup'])) {
        $view['#fields'][$key][0]['#markup'] = t(strip_tags($field[0]['#markup']));
      }
    }
  }
}
