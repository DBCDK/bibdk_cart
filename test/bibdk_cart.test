<?php
class BibdkCartTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Bibdk Cart test'),
      'description' => t('Test Cart functionality'),
      'group' => t('Bibliotek.dk - Cart'),
    );
  }

  public function setUp() {
    $this->profile = 'minimal';
    parent::setUp('ting_openformat', 'bibdk_cart', 'bibdk_linkme', 'bibdk_provider', 'bibdk_webservice');
    variable_set('ting_search_url', 'lakiseks.dbc.dk/openbibdk/0.5/');
    variable_set('bibdk_provider_webservice_url', $this->getAbsoluteUrl('bibdk_webservice'));
    variable_set('bibdk_provider_security_code', 'securityCode');

  }

  public function testView() {
    // Test cart page for anonymous users
    $this->drupalGet('user');
    $this->assertText('Cart', 'Cart tab is present');
    $this->clickLink('Cart');
    $this->assertUrl('user/cart', array(), 'Cart page exists');

    // Test link on manifestation
    $this->drupalGet('work/870970-basis:21905208');
    $this->assertText('add_item_to_cart');
    $pid = '870970-basis:21905208';
    $url = $this->getAbsoluteUrl('cart/ajax');
    $options = array(
      'query' => array(
        'pid' => $pid,
      ),
    );
    $result = $this->drupalGetAJAX($url, $options);

    $this->drupalGet('user/cart');
    $this->assertText('Tove Ditlevsen');
    $this->assertText('remove_item_from_cart');
  }

  public function testBibdkCartUserLogin() {
    //Reset cart count
    bibdk_webservice_request(TRUE);
    $this->_createProviderUser();
    // Create dummy provider user
    $user = new stdClass();
    $user->uid = 1;
    $user->name = 'good_user';
    ding_user_save_creds(array('creds' => array(
      'name' => 'good_user',
      'pass' => 'password',
    )), $user);

    // reset session
    $_SESSION['bibdk_cart'] = NULL;
    $edit = array();

    // Session should be updated with content from webservice
    bibdk_cart_user_login($edit, $user);
    $expected_result = array(
      '870970-basis:06343570' => '870970-basis:06343570',
      '820010-katalog:5025393' => '820010-katalog:5025393',
      '820010-katalog:3674811' => '820010-katalog:3674811',
      '820010-katalog:2266809' => '820010-katalog:2266809',
      '830370-katalog:AH9900827' => '830370-katalog:AH9900827',
      '820030-katalog:804671' => '820030-katalog:804671',
      '870970-basis:06042457' => '870970-basis:06042457',
      '870970-basis:07121377' => '870970-basis:07121377',
      '870970-basis:29317038,870970-basis:25194853,870970-basis:22441671,870970-basis:22629344,870970-basis:22252852,870970-basis:26178533' => '870970-basis:29317038,870970-basis:25194853,870970-basis:22441671,870970-basis:22629344,870970-basis:22252852,870970-basis:26178533',
    );
    $this->assertEqual($_SESSION['bibdk_cart'], $expected_result, 'Session is updated with cart content from webservice');

    // Existing objects in session should be merged with webservice content
    $_SESSION['bibdk_cart'] = array(
      'test' => 'test:basis-pid',
    );
    $expected_result = $_SESSION['bibdk_cart'] + $expected_result;
    bibdk_cart_user_login($edit, $user);
    $this->assertEqual($_SESSION['bibdk_cart'], $expected_result, 'Session is updated with cart content from webservice');

    // Nothing should happen with the Session if not provider user
    $expected_result = $_SESSION['bibdk_cart'] = array(
      'test' => 'test:basis-pid',
    );
    $user->uid = 5;
    bibdk_cart_user_login($edit, $user);
    $this->assertEqual($_SESSION['bibdk_cart'], $expected_result, 'Session is unchanged');
  }

  public function testWebserviceMethods() {
    // Fake provider user
    $this->_createProviderUser();
    //Reset cart count
    bibdk_webservice_request(TRUE);
    // Create dummy provider user
    $user = new stdClass();
    $user->uid = 1;
    $user->name = 'good_user';
    ding_user_save_creds(array('creds' => array(
      'name' => 'good_user',
      'pass' => 'password',
    )), $user);

    // Create dummy anonymous user
    $anonymous = new stdClass();
    $anonymous->uid = 0;

    //Get cart from ding_provider user
    $result = _bibdk_cart_get_cart_on_webservice($user);

    $this->assertTrue(count($result) == 9, 'Correct number on elements in returned for webservice');
    $this->assertTrue(reset($result) == '870970-basis:06343570', 'First element is a pid');

    //Get cart from anonymous user (no results)
    $result = _bibdk_cart_get_cart_on_webservice($anonymous);
    $this->assertFalse($result, 'No results from webservice');

    // add Content provider user
    $result = _bibdk_cart_add_content_webservice('123456789', $user);
    $this->assertEqual($result['status'], 'success', 'add content success');

    // add Content anonymous user
    $result = _bibdk_cart_add_content_webservice('123456789', $anonymous);
    $this->assertNotEqual($result['status'], 'success', 'no add content success');

    // remove Content provider user
    $result = _bibdk_cart_remove_content_webservice('123456789', $user);
    $this->assertEqual($result['status'], 'success', 'remove content success');

    // remove Content anonymous user
    $result = _bibdk_cart_remove_content_webservice('123456789', $anonymous);
    $this->assertNotEqual($result['status'], 'success', 'no remove content success');

  }

  private function _createProviderUser() {
    db_insert('authmap')
      ->fields(array(
      'uid' => 1,
      'module' => 'ding_user',
      'authname' => 'testusername',
    ))->execute();
  }

  public function testBibdkCartObjectNoUser() {
    BibdkCart::emptyCart();
    // empty cart
    $result = BibdkCart::getAll();
    $expected_result = array();
    $this->assertEqual($result, $expected_result, 'No results');

    // test add
    BibdkCart::add('test1');
    BibdkCart::add(array('test2', 'test3'));
    BibdkCart::add('test4');
    $result = BibdkCart::getAll();
    $expected_result = array(
      'test1' => 'test1',
      'test2,test3' => 'test2,test3',
      'test4' => 'test4',
    );
    $this->assertEqual($result, $expected_result, 'objects added');

    // test remove
    BibdkCart::remove('test1');
    BibdkCart::remove(array('test2,test3'));
    $result = BibdkCart::getAll();
    $expected_result = array(
      'test4' => 'test4',
    );
    $this->assertEqual($result, $expected_result, 'objects removed');

    // test checkInCart
    $this->assertTrue(BibdkCart::checkInCart('test4'), 'testObject 3 exists in card');
    $this->assertFalse(BibdkCart::checkInCart('test1'), 'testObject 1 does not exists in card');


    // test empty cart
    BibdkCart::emptyCart();
    $result = BibdkCart::getAll();
    $expected_result = array();
    $this->assertEqual($result, $expected_result);

  }

  /**
   * Tests the output data of bibdk_adhl.ajax.inc
   */
  public function testAjaxReesponse() {
    //add to cart
    $pid = '870970-basis:29225605';
    $url = $this->getAbsoluteUrl('cart/ajax');
    $options = array(
      'query' => array(
        'pid' => $pid,
      ),
    );
    $result = $this->drupalGetAJAX($url, $options);
    $this->assertEqual($result['pid'], $pid, 'Received pid correctly');
    $this->assertEqual($result['cartcount'], 1, 'Correct amount in cart: 1');
    $this->assertEqual($result['saved'], 1, 'Correctly saved in cart');
    $this->assertEqual($result['classid'], strtolower(strtr($pid, array(':' => '-'))), 'Correct classid specified');

    //remove from cart
    $pid = '870970-basis:29225605';
    $url = $this->getAbsoluteUrl('cart/ajax');
    $options = array(
      'query' => array(
        'pid' => $pid,
      ),
    );
    $result = $this->drupalGetAJAX($url, $options);
    $this->drupalGetAJAX($url, $options);
    $this->assertEqual($result['pid'], $pid, 'Received pid correctly');
    $this->assertEqual($result['cartcount'], 0, 'Correct amount in cart: 0');
    $this->assertEqual($result['saved'], 0, 'Correctly removed from cart');
    $this->assertEqual($result['classid'], strtolower(strtr($pid, array(':' => '-'))), 'Correct classid specified');
  }

  /**
   * Tests the functionality for deleteing several items in the cart view
   */
  public function testPrimaryActionsAjaxResponse() {
    //adding items to cart prior to actual test
    $_SESSION['bibdk_cart'] = NULL;

    $pids = array(
      '820030-katalog:804671',
      '870970-basis:06042457',
      '870970-basis:07121377',
      '870970-basis:06343570');

    foreach ($pids as $pid) {
      $url = $this->getAbsoluteUrl('cart/ajax');
      $options = array(
        'query' => array(
          'pid' => $pid,
        ),
      );
      $this->drupalGetAJAX($url, $options);
    }

    //deleting one single item
    $url = $this->getAbsoluteUrl('cart/ajax/deleteitems');
    $pid_to_remove = '870970-basis:06343570';
    $options = array(
      'query' => array(
        'pids' => $pid_to_remove,
      ),
    );

    $result = $this->drupalGetAJAX($url, $options);
    $this->assertEqual($result['cartcount'], 3, t('Correct amount in cart found %result, should be %ideal', array('%result' => $result['cartcount'], '%ideal' => '3')));

    //deleting three items in a row
    $url = $this->getAbsoluteUrl('cart/ajax/deleteitems');
    $pids_to_remove = array(
      '820030-katalog:804671',
      '870970-basis:06042457',
      '870970-basis:07121377');
    $options = array(
      'query' => array(
        'pids' => $pids_to_remove,
      ),
    );

    $result = $this->drupalGetAJAX($url, $options);
    $this->assertEqual($result['cartcount'], 0, t('Correct amount in cart found %result, should be %ideal', array('%result' => $result['cartcount'], '%ideal' => '0')));
  }
}
